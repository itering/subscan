{
  "magicNumber": 1635018093,
  "metadata": {
    "modules": [
      {
        "name": "system",
        "prefix": "System",
        "storage": [
          {
            "name": "AccountNonce",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Index"
              }
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Extrinsics nonce for accounts."
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "ExtrinsicCount",
            "modifier": "Optional",
            "type": {
              "PlainType": "u32"
            },
            "fallback": "0x00",
            "docs": [
              " Total extrinsics count for the current block."
            ]
          },
          {
            "name": "AllExtrinsicsWeight",
            "modifier": "Optional",
            "type": {
              "PlainType": "u32"
            },
            "fallback": "0x00",
            "docs": [
              " Total weight for all extrinsics put together, for the current block."
            ]
          },
          {
            "name": "BlockHash",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "BlockNumber",
                "value": "Hash"
              }
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Map of block numbers to block hashes."
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "ExtrinsicData",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "u32",
                "value": "Bytes"
              }
            },
            "fallback": "0x00",
            "docs": [
              " Extrinsics data for the current block (maps an extrinsic's index to its data)."
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "RandomMaterial",
            "modifier": "Default",
            "type": {
              "PlainType": "(i8, Vec\u003cHash\u003e)"
            },
            "fallback": "0x0000",
            "docs": [
              " ring buffer with the `i8` prefix being the index into the `Vec` of the oldest hash."
            ]
          },
          {
            "name": "Number",
            "modifier": "Default",
            "type": {
              "PlainType": "BlockNumber"
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The current block number being processed. Set by `execute_block`."
            ]
          },
          {
            "name": "ParentHash",
            "modifier": "Default",
            "type": {
              "PlainType": "Hash"
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Hash of the previous block."
            ]
          },
          {
            "name": "ExtrinsicsRoot",
            "modifier": "Default",
            "type": {
              "PlainType": "Hash"
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Extrinsics root of the current block, also part of the block header."
            ]
          },
          {
            "name": "Digest",
            "modifier": "Default",
            "type": {
              "PlainType": "DigestOf"
            },
            "fallback": "0x00",
            "docs": [
              " Digest of the current block, also part of the block header."
            ]
          },
          {
            "name": "Events",
            "modifier": "Default",
            "type": {
              "PlainType": "Vec\u003cEventRecord\u003cEvent, Hash\u003e\u003e"
            },
            "fallback": "0x00",
            "docs": [
              " Events deposited for the current block."
            ]
          },
          {
            "name": "EventCount",
            "modifier": "Default",
            "type": {
              "PlainType": "EventIndex"
            },
            "fallback": "0x00000000",
            "docs": [
              " The number of events in the `Events\u003cT\u003e` list."
            ]
          },
          {
            "name": "EventTopics",
            "modifier": "Default",
            "type": {
              "DoubleMapType": {
                "hasher": "Blake2_256",
                "key1": "Null",
                "key2": "Hash",
                "key2Hasher": "Blake2_256",
                "value": "Vec\u003c(BlockNumber, EventIndex)\u003e"
              }
            },
            "fallback": "0x00",
            "docs": [
              " no notification will be triggered thus the event might be lost."
            ],
            "hasher": "Blake2_256"
          }
        ],
        "calls": [
          {
            "lookup": "0000",
            "name": "remark",
            "docs": [
              " Make some on-chain remark."
            ],
            "args": [
              {
                "name": "_remark",
                "type": "Bytes"
              }
            ]
          },
          {
            "lookup": "0001",
            "name": "set_heap_pages",
            "docs": [
              " Set the number of pages in the WebAssembly environment's heap."
            ],
            "args": [
              {
                "name": "pages",
                "type": "u64"
              }
            ]
          },
          {
            "lookup": "0002",
            "name": "set_code",
            "docs": [
              " Set the new code."
            ],
            "args": [
              {
                "name": "new",
                "type": "Bytes"
              }
            ]
          },
          {
            "lookup": "0003",
            "name": "set_storage",
            "docs": [
              " Set some items of storage."
            ],
            "args": [
              {
                "name": "items",
                "type": "Vec\u003cKeyValue\u003e"
              }
            ]
          },
          {
            "lookup": "0004",
            "name": "kill_storage",
            "docs": [
              " Kill some items from storage."
            ],
            "args": [
              {
                "name": "keys",
                "type": "Vec\u003cKey\u003e"
              }
            ]
          }
        ],
        "events": [
          {
            "lookup": "0000",
            "name": "ExtrinsicSuccess",
            "docs": [
              " An extrinsic completed successfully."
            ],
            "args": null
          },
          {
            "lookup": "0001",
            "name": "ExtrinsicFailed",
            "docs": [
              " An extrinsic failed."
            ],
            "args": null
          }
        ]
      },
      {
        "name": "aura",
        "prefix": "",
        "storage": null,
        "calls": null,
        "events": null
      },
      {
        "name": "timestamp",
        "prefix": "Timestamp",
        "storage": [
          {
            "name": "Now",
            "modifier": "Default",
            "type": {
              "PlainType": "Moment"
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Current time for the current block."
            ]
          },
          {
            "name": "BlockPeriod",
            "modifier": "Optional",
            "type": {
              "PlainType": "Moment"
            },
            "fallback": "0x00",
            "docs": [
              " Old storage item provided for compatibility. Remove after all networks upgraded."
            ]
          },
          {
            "name": "MinimumPeriod",
            "modifier": "Default",
            "type": {
              "PlainType": "Moment"
            },
            "fallback": "0x0300000000000000",
            "docs": [
              " period on default settings."
            ]
          },
          {
            "name": "DidUpdate",
            "modifier": "Default",
            "type": {
              "PlainType": "bool"
            },
            "fallback": "0x00",
            "docs": [
              " Did the timestamp get updated in this block?"
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0100",
            "name": "set",
            "docs": [
              " Set the current time.",
              "",
              " This call should be invoked exactly once per block. It will panic at the finalization phase,",
              " if this call hasn't been invoked by that time.",
              "",
              " The timestamp should be greater than the previous one by the amount specified by `minimum_period`.",
              "",
              " The dispatch origin for this call must be `Inherent`."
            ],
            "args": [
              {
                "name": "now",
                "type": "Compact\u003cMoment\u003e"
              }
            ]
          }
        ],
        "events": null
      },
      {
        "name": "authorship",
        "prefix": "Authorship",
        "storage": [
          {
            "name": "Uncles",
            "modifier": "Default",
            "type": {
              "PlainType": "Vec\u003cUncleEntryItem\u003cBlockNumber, Hash, AccountId\u003e\u003e"
            },
            "fallback": "0x00",
            "docs": [
              " Uncles"
            ]
          },
          {
            "name": "Author",
            "modifier": "Optional",
            "type": {
              "PlainType": "AccountId"
            },
            "fallback": "0x00",
            "docs": [
              " Author of current block."
            ]
          },
          {
            "name": "DidSetUncles",
            "modifier": "Default",
            "type": {
              "PlainType": "bool"
            },
            "fallback": "0x00",
            "docs": [
              " Whether uncles were already set in this block."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0200",
            "name": "set_uncles",
            "docs": [
              " Provide a set of uncles."
            ],
            "args": [
              {
                "name": "new_uncles",
                "type": "Vec\u003cHeader\u003e"
              }
            ]
          }
        ],
        "events": null
      },
      {
        "name": "indices",
        "prefix": "Indices",
        "storage": [
          {
            "name": "NextEnumSet",
            "modifier": "Default",
            "type": {
              "PlainType": "AccountIndex"
            },
            "fallback": "0x00000000",
            "docs": [
              " The next free enumeration set."
            ]
          },
          {
            "name": "EnumSet",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountIndex",
                "value": "Vec\u003cAccountId\u003e"
              }
            },
            "fallback": "0x00",
            "docs": [
              " The enumeration sets."
            ],
            "hasher": "Blake2_256"
          }
        ],
        "calls": null,
        "events": [
          {
            "lookup": "0100",
            "name": "NewAccountIndex",
            "docs": [
              " A new account index was assigned.",
              "",
              " This event is not triggered when an existing index is reassigned",
              " to another `AccountId`."
            ],
            "args": [
              "AccountId",
              "AccountIndex"
            ]
          }
        ]
      },
      {
        "name": "balances",
        "prefix": "Balances",
        "storage": [
          {
            "name": "TotalIssuance",
            "modifier": "Default",
            "type": {
              "PlainType": "Balance"
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The total units issued in the system."
            ]
          },
          {
            "name": "Vesting",
            "modifier": "Optional",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "VestingSchedule\u003cBalance\u003e"
              }
            },
            "fallback": "0x00",
            "docs": [
              " Information regarding the vesting of a given account."
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "FreeBalance",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Balance"
              }
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " collapsed to zero if it ever becomes less than `ExistentialDeposit`."
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "ReservedBalance",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Balance"
              }
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " collapsed to zero if it ever becomes less than `ExistentialDeposit`.)"
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "Locks",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Vec\u003cBalanceLock\u003cBalance, BlockNumber\u003e\u003e"
              }
            },
            "fallback": "0x00",
            "docs": [
              " Any liquidity locks on some account balances."
            ],
            "hasher": "Blake2_256"
          }
        ],
        "calls": [
          {
            "lookup": "0300",
            "name": "transfer",
            "docs": [
              " Transfer some liquid free balance to another account.",
              "",
              " `transfer` will set the `FreeBalance` of the sender and receiver.",
              " It will decrease the total issuance of the system by the `TransferFee`.",
              " If the sender's account is below the existential deposit as a result",
              " of the transfer, the account will be reaped.",
              "",
              " The dispatch origin for this call must be `Signed` by the transactor.",
              "",
              " # \u003cweight\u003e",
              " - Dependent on arguments but not critical, given proper implementations for",
              "   input config types. See related functions below.",
              " - It contains a limited number of reads and writes internally and no complex computation.",
              "",
              " Related functions:",
              "",
              "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
              "   - Transferring balances to accounts that did not exist before will cause",
              "      `T::OnNewAccount::on_new_account` to be called.",
              "   - Removing enough funds from an account will trigger",
              "     `T::DustRemoval::on_unbalanced` and `T::OnFreeBalanceZero::on_free_balance_zero`.",
              "",
              " # \u003c/weight\u003e"
            ],
            "args": [
              {
                "name": "dest",
                "type": "Address"
              },
              {
                "name": "value",
                "type": "Compact\u003cBalance\u003e"
              }
            ]
          },
          {
            "lookup": "0301",
            "name": "set_balance",
            "docs": [
              " Set the balances of a given account.",
              "",
              " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
              " also decrease the total issuance of the system (`TotalIssuance`).",
              " If the new free or reserved balance is below the existential deposit,",
              " it will reset the account nonce (`system::AccountNonce`).",
              "",
              " The dispatch origin for this call is `root`.",
              "",
              " # \u003cweight\u003e",
              " - Independent of the arguments.",
              " - Contains a limited number of reads and writes.",
              " # \u003c/weight\u003e"
            ],
            "args": [
              {
                "name": "who",
                "type": "Address"
              },
              {
                "name": "new_free",
                "type": "Compact\u003cBalance\u003e"
              },
              {
                "name": "new_reserved",
                "type": "Compact\u003cBalance\u003e"
              }
            ]
          }
        ],
        "events": [
          {
            "lookup": "0200",
            "name": "NewAccount",
            "docs": [
              " A new account was created."
            ],
            "args": [
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0201",
            "name": "ReapedAccount",
            "docs": [
              " An account was reaped."
            ],
            "args": [
              "AccountId"
            ]
          },
          {
            "lookup": "0202",
            "name": "Transfer",
            "docs": [
              " Transfer succeeded (from, to, value, fees)."
            ],
            "args": [
              "AccountId",
              "AccountId",
              "Balance",
              "Balance"
            ]
          }
        ],
        "constants": [
          {
            "name": "ExistentialDeposit",
            "type": "Balance",
            "constants_value": "0x01000000000000000000000000000000",
            "docs": [
              " The minimum amount required to keep an account open."
            ]
          },
          {
            "name": "TransferFee",
            "type": "Balance",
            "constants_value": "0x01000000000000000000000000000000",
            "docs": [
              " The fee required to make a transfer."
            ]
          },
          {
            "name": "CreationFee",
            "type": "Balance",
            "constants_value": "0x01000000000000000000000000000000",
            "docs": [
              " The fee required to create an account."
            ]
          },
          {
            "name": "TransactionBaseFee",
            "type": "Balance",
            "constants_value": "0x01000000000000000000000000000000",
            "docs": [
              " The fee to be paid for making a transaction; the base."
            ]
          },
          {
            "name": "TransactionByteFee",
            "type": "Balance",
            "constants_value": "0x01000000000000000000000000000000",
            "docs": [
              " The fee to be paid for making a transaction; the per-byte portion."
            ]
          }
        ]
      },
      {
        "name": "kton",
        "prefix": "Kton",
        "storage": [
          {
            "name": "MinimumBalance",
            "modifier": "Default",
            "type": {
              "PlainType": "Balance"
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " The total `units issued in the system."
            ]
          },
          {
            "name": "TotalIssuance",
            "modifier": "Default",
            "type": {
              "PlainType": "Balance"
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": null
          },
          {
            "name": "FreeBalance",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Balance"
              }
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "ReservedBalance",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Balance"
              }
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "Locks",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Vec\u003cBalanceLock\u003cBalance, BlockNumber\u003e\u003e"
              }
            },
            "fallback": "0x00",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "TotalLock",
            "modifier": "Default",
            "type": {
              "PlainType": "Balance"
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": null
          },
          {
            "name": "Vesting",
            "modifier": "Optional",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "VestingSchedule\u003cBalance\u003e"
              }
            },
            "fallback": "0x00",
            "docs": null,
            "hasher": "Blake2_256"
          }
        ],
        "calls": [
          {
            "lookup": "0400",
            "name": "transfer",
            "docs": null,
            "args": [
              {
                "name": "dest",
                "type": "Address"
              },
              {
                "name": "value",
                "type": "Compact\u003cBalance\u003e"
              }
            ]
          }
        ],
        "events": [
          {
            "lookup": "0300",
            "name": "TokenTransfer",
            "docs": [
              " Transfer succeeded (from, to, value, fees)."
            ],
            "args": [
              "AccountId",
              "AccountId",
              "Balance"
            ]
          }
        ]
      },
      {
        "name": "session",
        "prefix": "Session",
        "storage": [
          {
            "name": "Validators",
            "modifier": "Default",
            "type": {
              "PlainType": "Vec\u003cAccountId\u003e"
            },
            "fallback": "0x00",
            "docs": [
              " The current set of validators."
            ]
          },
          {
            "name": "CurrentIndex",
            "modifier": "Default",
            "type": {
              "PlainType": "SessionIndex"
            },
            "fallback": "0x00000000",
            "docs": [
              " Current index of the session."
            ]
          },
          {
            "name": "Changed",
            "modifier": "Default",
            "type": {
              "PlainType": "bool"
            },
            "fallback": "0x00",
            "docs": [
              " True if anything has changed in this session."
            ]
          },
          {
            "name": "NextKeyFor",
            "modifier": "Optional",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Keys"
              }
            },
            "fallback": "0x00",
            "docs": [
              " The next key for a given validator."
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "Active",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "u32",
                "value": "Vec\u003cOpaqueKey\u003e"
              }
            },
            "fallback": "0x00",
            "docs": [
              " The keys that are currently active."
            ],
            "hasher": "Blake2_256"
          }
        ],
        "calls": [
          {
            "lookup": "0500",
            "name": "set_keys",
            "docs": [
              " Sets the session key(s) of the function caller to `key`.",
              " Allows an account to set its session key prior to becoming a validator.",
              " This doesn't take effect until the next session.",
              "",
              " The dispatch origin of this function must be signed.",
              "",
              " # \u003cweight\u003e",
              " - O(1).",
              " - One extra DB entry.",
              " # \u003c/weight\u003e"
            ],
            "args": [
              {
                "name": "keys",
                "type": "Keys"
              },
              {
                "name": "proof",
                "type": "Bytes"
              }
            ]
          }
        ],
        "events": [
          {
            "lookup": "0400",
            "name": "NewSession",
            "docs": [
              " New session has happened. Note that the argument is the session index, not the block",
              " number as the type might suggest."
            ],
            "args": [
              "SessionIndex"
            ]
          }
        ]
      },
      {
        "name": "staking",
        "prefix": "Staking",
        "storage": [
          {
            "name": "ValidatorCount",
            "modifier": "Default",
            "type": {
              "PlainType": "u32"
            },
            "fallback": "0x00000000",
            "docs": null
          },
          {
            "name": "MinimumValidatorCount",
            "modifier": "Default",
            "type": {
              "PlainType": "u32"
            },
            "fallback": "0x04000000",
            "docs": null
          },
          {
            "name": "SessionReward",
            "modifier": "Default",
            "type": {
              "PlainType": "Perbill"
            },
            "fallback": "0x0046c323",
            "docs": null
          },
          {
            "name": "OfflineSlash",
            "modifier": "Default",
            "type": {
              "PlainType": "Perbill"
            },
            "fallback": "0xe8030000",
            "docs": null
          },
          {
            "name": "OfflineSlashGrace",
            "modifier": "Default",
            "type": {
              "PlainType": "u32"
            },
            "fallback": "0x00000000",
            "docs": null
          },
          {
            "name": "Invulnerables",
            "modifier": "Default",
            "type": {
              "PlainType": "Vec\u003cAccountId\u003e"
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "Bonded",
            "modifier": "Optional",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "AccountId"
              }
            },
            "fallback": "0x00",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "Ledger",
            "modifier": "Optional",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "StakingLedgers\u003cAccountId, RingBalanceOf, KtonBalanceOf,\nStakingBalance\u003cRingBalanceOf, KtonBalanceOf\u003e, Moment\u003e"
              }
            },
            "fallback": "0x00",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "Payee",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "RewardDestination"
              }
            },
            "fallback": "0x00",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "Validators",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": true,
                "key": "AccountId",
                "value": "ValidatorPrefs"
              }
            },
            "fallback": "0x0c00000000",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "Nominators",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": true,
                "key": "AccountId",
                "value": "Vec\u003cAccountId\u003e"
              }
            },
            "fallback": "0x00",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "Stakers",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Exposures\u003cAccountId, ExtendedBalance\u003e"
              }
            },
            "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "CurrentElected",
            "modifier": "Default",
            "type": {
              "PlainType": "Vec\u003cAccountId\u003e"
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "CurrentEra",
            "modifier": "Default",
            "type": {
              "PlainType": "EraIndex"
            },
            "fallback": "0x00000000",
            "docs": null
          },
          {
            "name": "CurrentSessionReward",
            "modifier": "Default",
            "type": {
              "PlainType": "RingBalanceOf"
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": null
          },
          {
            "name": "CurrentEraReward",
            "modifier": "Default",
            "type": {
              "PlainType": "RingBalanceOf"
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": null
          },
          {
            "name": "SlotStake",
            "modifier": "Default",
            "type": {
              "PlainType": "ExtendedBalance"
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": null
          },
          {
            "name": "SlashCount",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "u32"
              }
            },
            "fallback": "0x00000000",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "RecentlyOffline",
            "modifier": "Default",
            "type": {
              "PlainType": "Vec\u003c(AccountId, BlockNumber, u32)\u003e"
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "ForceNewEra",
            "modifier": "Default",
            "type": {
              "PlainType": "bool"
            },
            "fallback": "0x00",
            "docs": null
          },
          {
            "name": "EpochIndex",
            "modifier": "Default",
            "type": {
              "PlainType": "BlockNumber"
            },
            "fallback": "0x0000000000000000",
            "docs": null
          },
          {
            "name": "CurrentEraTotalReward",
            "modifier": "Default",
            "type": {
              "PlainType": "RingBalanceOf"
            },
            "fallback": "0x00000000000000000000000000000000",
            "docs": [
              " and increased for every successfully finished session."
            ]
          },
          {
            "name": "NodeName",
            "modifier": "Default",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "Bytes"
              }
            },
            "fallback": "0x00",
            "docs": null,
            "hasher": "Blake2_256"
          },
          {
            "name": "RingPool",
            "modifier": "Default",
            "type": {
              "PlainType": "RingBalanceOf"
            },
            "fallback": "0x01000000000000000000000000000000",
            "docs": null
          },
          {
            "name": "KtonPool",
            "modifier": "Default",
            "type": {
              "PlainType": "KtonBalanceOf"
            },
            "fallback": "0x01000000000000000000000000000000",
            "docs": null
          }
        ],
        "calls": [
          {
            "lookup": "0600",
            "name": "bond",
            "docs": null,
            "args": [
              {
                "name": "controller",
                "type": "Address"
              },
              {
                "name": "value",
                "type": "StakingBalance\u003cRingBalanceOf, KtonBalanceOf\u003e"
              },
              {
                "name": "payee",
                "type": "RewardDestination"
              },
              {
                "name": "promise_month",
                "type": "u32"
              }
            ]
          },
          {
            "lookup": "0601",
            "name": "bond_extra",
            "docs": null,
            "args": [
              {
                "name": "value",
                "type": "StakingBalance\u003cRingBalanceOf, KtonBalanceOf\u003e"
              },
              {
                "name": "promise_month",
                "type": "u32"
              }
            ]
          },
          {
            "lookup": "0602",
            "name": "unbond",
            "docs": [
              " for normal_ring or normal_kton, follow the original substrate pattern",
              " for time_deposit_ring, transform it into normal_ring first",
              " modify time_deposit_items and time_deposit_ring amount"
            ],
            "args": [
              {
                "name": "value",
                "type": "StakingBalance\u003cRingBalanceOf, KtonBalanceOf\u003e"
              }
            ]
          },
          {
            "lookup": "0603",
            "name": "unbond_with_punish",
            "docs": null,
            "args": [
              {
                "name": "value",
                "type": "RingBalanceOf"
              },
              {
                "name": "expire_time",
                "type": "Moment"
              }
            ]
          },
          {
            "lookup": "0604",
            "name": "promise_extra",
            "docs": [
              " called by controller"
            ],
            "args": [
              {
                "name": "value",
                "type": "RingBalanceOf"
              },
              {
                "name": "promise_month",
                "type": "u32"
              }
            ]
          },
          {
            "lookup": "0605",
            "name": "withdraw_unbonded",
            "docs": [
              " may both withdraw ring and kton at the same time"
            ],
            "args": null
          },
          {
            "lookup": "0606",
            "name": "validate",
            "docs": null,
            "args": [
              {
                "name": "name",
                "type": "Bytes"
              },
              {
                "name": "ratio",
                "type": "u32"
              },
              {
                "name": "unstake_threshold",
                "type": "u32"
              }
            ]
          },
          {
            "lookup": "0607",
            "name": "nominate",
            "docs": null,
            "args": [
              {
                "name": "targets",
                "type": "Vec\u003c\u003cLookup as StaticLookup\u003e::Source\u003e"
              }
            ]
          },
          {
            "lookup": "0608",
            "name": "chill",
            "docs": null,
            "args": null
          },
          {
            "lookup": "0609",
            "name": "set_payee",
            "docs": null,
            "args": [
              {
                "name": "payee",
                "type": "RewardDestination"
              }
            ]
          },
          {
            "lookup": "060a",
            "name": "set_controller",
            "docs": null,
            "args": [
              {
                "name": "controller",
                "type": "Address"
              }
            ]
          },
          {
            "lookup": "060b",
            "name": "set_validator_count",
            "docs": [
              " The ideal number of validators."
            ],
            "args": [
              {
                "name": "new",
                "type": "Compact\u003cu32\u003e"
              }
            ]
          },
          {
            "lookup": "060c",
            "name": "force_new_era",
            "docs": null,
            "args": null
          },
          {
            "lookup": "060d",
            "name": "set_offline_slash_grace",
            "docs": [
              " Set the offline slash grace period."
            ],
            "args": [
              {
                "name": "new",
                "type": "Compact\u003cu32\u003e"
              }
            ]
          },
          {
            "lookup": "060e",
            "name": "set_invulnerables",
            "docs": [
              " Set the validators who cannot be slashed (if any)."
            ],
            "args": [
              {
                "name": "validators",
                "type": "Vec\u003cAccountId\u003e"
              }
            ]
          }
        ],
        "events": [
          {
            "lookup": "0500",
            "name": "Reward",
            "docs": [
              " All validators have been rewarded by the given balance."
            ],
            "args": [
              "Balance"
            ]
          },
          {
            "lookup": "0501",
            "name": "OfflineWarning",
            "docs": [
              " One validator (and its nominators) has been given an offline-warning (it is still",
              " within its grace). The accrued number of slashes is recorded, too."
            ],
            "args": [
              "AccountId",
              "u32"
            ]
          },
          {
            "lookup": "0502",
            "name": "OfflineSlash",
            "docs": [
              " One validator (and its nominators) has been slashed by the given ratio."
            ],
            "args": [
              "AccountId",
              "u32"
            ]
          },
          {
            "lookup": "0503",
            "name": "NodeNameUpdated",
            "docs": [
              " NodeName changed"
            ],
            "args": null
          }
        ],
        "constants": [
          {
            "name": "SessionsPerEra",
            "type": "SessionIndex",
            "constants_value": "0x0a000000",
            "docs": [
              " Number of sessions per era."
            ]
          },
          {
            "name": "BondingDuration",
            "type": "EraIndex",
            "constants_value": "0x02000000",
            "docs": [
              " Number of eras that staked funds must remain bonded for."
            ]
          }
        ]
      },
      {
        "name": "contracts",
        "prefix": "Contract",
        "storage": [
          {
            "name": "GasSpent",
            "modifier": "Default",
            "type": {
              "PlainType": "Gas"
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " Gas spent so far in this block."
            ]
          },
          {
            "name": "CurrentSchedule",
            "modifier": "Default",
            "type": {
              "PlainType": "Schedule"
            },
            "fallback": "0x0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000008700000000000000af0000000000000001000000000000000100000000000000040000000000010010000000004000000020000000",
            "docs": [
              " Current cost schedule for contracts."
            ]
          },
          {
            "name": "PristineCode",
            "modifier": "Optional",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "CodeHash",
                "value": "Bytes"
              }
            },
            "fallback": "0x00",
            "docs": [
              " A mapping from an original code hash to the original code, untouched by instrumentation."
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "CodeStorage",
            "modifier": "Optional",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "CodeHash",
                "value": "wasm::PrefabWasmModule"
              }
            },
            "fallback": "0x00",
            "docs": [
              " A mapping between an original code hash and instrumented wasm code, ready for execution."
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "AccountCounter",
            "modifier": "Default",
            "type": {
              "PlainType": "u64"
            },
            "fallback": "0x0000000000000000",
            "docs": [
              " The subtrie counter."
            ]
          },
          {
            "name": "ContractInfoOf",
            "modifier": "Optional",
            "type": {
              "MapType": {
                "hasher": "Blake2_256",
                "isLinked": false,
                "key": "AccountId",
                "value": "ContractInfo"
              }
            },
            "fallback": "0x00",
            "docs": [
              " The code associated with a given account."
            ],
            "hasher": "Blake2_256"
          },
          {
            "name": "GasPrice",
            "modifier": "Default",
            "type": {
              "PlainType": "BalanceOf"
            },
            "fallback": "0x01000000000000000000000000000000",
            "docs": [
              " The price of one unit of gas."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0700",
            "name": "update_schedule",
            "docs": [
              " Updates the schedule for metering contracts.",
              "",
              " The schedule must have a greater version than the stored schedule."
            ],
            "args": [
              {
                "name": "schedule",
                "type": "Schedule"
              }
            ]
          },
          {
            "lookup": "0701",
            "name": "put_code",
            "docs": [
              " Stores the given binary Wasm code into the chain's storage and returns its `codehash`.",
              " You can instantiate contracts only with stored code."
            ],
            "args": [
              {
                "name": "gas_limit",
                "type": "Compact\u003cGas\u003e"
              },
              {
                "name": "code",
                "type": "Bytes"
              }
            ]
          },
          {
            "lookup": "0702",
            "name": "call",
            "docs": [
              " Makes a call to an account, optionally transferring some balance.",
              "",
              " * If the account is a smart-contract account, the associated code will be",
              " executed and any value will be transferred.",
              " * If the account is a regular account, any value will be transferred.",
              " * If no account exists and the call value is not less than `existential_deposit`,",
              " a regular account will be created and any value will be transferred."
            ],
            "args": [
              {
                "name": "dest",
                "type": "Address"
              },
              {
                "name": "value",
                "type": "Compact\u003cBalanceOf\u003e"
              },
              {
                "name": "gas_limit",
                "type": "Compact\u003cGas\u003e"
              },
              {
                "name": "data",
                "type": "Bytes"
              }
            ]
          },
          {
            "lookup": "0703",
            "name": "create",
            "docs": [
              " Creates a new contract from the `codehash` generated by `put_code`, optionally transferring some balance.",
              "",
              " Creation is executed as follows:",
              "",
              " - The destination address is computed based on the sender and hash of the code.",
              " - The smart-contract account is created at the computed address.",
              " - The `ctor_code` is executed in the context of the newly-created account. Buffer returned",
              "   after the execution is saved as the `code` of the account. That code will be invoked",
              "   upon any call received by this account.",
              " - The contract is initialized."
            ],
            "args": [
              {
                "name": "endowment",
                "type": "Compact\u003cBalanceOf\u003e"
              },
              {
                "name": "gas_limit",
                "type": "Compact\u003cGas\u003e"
              },
              {
                "name": "code_hash",
                "type": "CodeHash"
              },
              {
                "name": "data",
                "type": "Bytes"
              }
            ]
          },
          {
            "lookup": "0704",
            "name": "claim_surcharge",
            "docs": [
              " Allows block producers to claim a small reward for evicting a contract. If a block producer",
              " fails to do so, a regular users will be allowed to claim the reward.",
              "",
              " If contract is not evicted as a result of this call, no actions are taken and",
              " the sender is not eligible for the reward."
            ],
            "args": [
              {
                "name": "dest",
                "type": "AccountId"
              },
              {
                "name": "aux_sender",
                "type": "Option\u003cAccountId\u003e"
              }
            ]
          },
          {
            "lookup": "0705",
            "name": "restore_to",
            "docs": [
              " Allows a contract to restore a tombstone by giving its storage.",
              "",
              " The contract that wants to restore (i.e. origin of the call, or `msg.sender` in Solidity terms) will compute a",
              " tombstone with its storage and the given code_hash. If the computed tombstone",
              " match the destination one, the destination contract is restored with the rent_allowance` specified,",
              " while the origin sends all its funds to the destination and is removed."
            ],
            "args": [
              {
                "name": "dest",
                "type": "AccountId"
              },
              {
                "name": "code_hash",
                "type": "CodeHash"
              },
              {
                "name": "rent_allowance",
                "type": "BalanceOf"
              },
              {
                "name": "delta",
                "type": "Vec\u003cexec::StorageKey\u003e"
              }
            ]
          }
        ],
        "events": [
          {
            "lookup": "0600",
            "name": "Transfer",
            "docs": [
              " Transfer happened `from` to `to` with given `value` as part of a `call` or `create`."
            ],
            "args": [
              "AccountId",
              "AccountId",
              "Balance"
            ]
          },
          {
            "lookup": "0601",
            "name": "Instantiated",
            "docs": [
              " Contract deployed by address at the specified address."
            ],
            "args": [
              "AccountId",
              "AccountId"
            ]
          },
          {
            "lookup": "0602",
            "name": "CodeStored",
            "docs": [
              " Code with the specified hash has been stored."
            ],
            "args": [
              "Hash"
            ]
          },
          {
            "lookup": "0603",
            "name": "ScheduleUpdated",
            "docs": [
              " Triggered when the current schedule is updated."
            ],
            "args": [
              "u32"
            ]
          },
          {
            "lookup": "0604",
            "name": "Dispatched",
            "docs": [
              " A call was dispatched from the given account. The bool signals whether it was",
              " successful execution or not."
            ],
            "args": [
              "AccountId",
              "bool"
            ]
          },
          {
            "lookup": "0605",
            "name": "Contract",
            "docs": [
              " An event from contract of account."
            ],
            "args": [
              "AccountId",
              "Vec\u003cu8\u003e"
            ]
          }
        ],
        "constants": [
          {
            "name": "SignedClaimHandicap",
            "type": "BlockNumber",
            "constants_value": "0x0200000000000000",
            "docs": [
              " Number of block delay an extrinsic claim surcharge has.",
              "",
              " When claim surchage is called by an extrinsic the rent is checked",
              " for current_block - delay"
            ]
          },
          {
            "name": "TombstoneDeposit",
            "type": "BalanceOf",
            "constants_value": "0x10000000000000000000000000000000",
            "docs": [
              " The minimum amount required to generate a tombstone."
            ]
          },
          {
            "name": "StorageSizeOffset",
            "type": "u32",
            "constants_value": "0x08000000",
            "docs": [
              " Size of a contract at the time of creation. This is a simple way to ensure",
              " that empty contracts eventually gets deleted."
            ]
          },
          {
            "name": "RentByteFee",
            "type": "BalanceOf",
            "constants_value": "0x04000000000000000000000000000000",
            "docs": [
              " Price of a byte of storage per one block interval. Should be greater than 0."
            ]
          },
          {
            "name": "RentDepositOffset",
            "type": "BalanceOf",
            "constants_value": "0xe8030000000000000000000000000000",
            "docs": [
              " The amount of funds a contract should deposit in order to offset",
              " the cost of one byte.",
              "",
              " Let's suppose the deposit is 1,000 BU (balance units)/byte and the rent is 1 BU/byte/day,",
              " then a contract with 1,000,000 BU that uses 1,000 bytes of storage would pay no rent.",
              " But if the balance reduced to 500,000 BU and the storage stayed the same at 1,000,",
              " then it would pay 500 BU/day."
            ]
          },
          {
            "name": "SurchargeReward",
            "type": "BalanceOf",
            "constants_value": "0x96000000000000000000000000000000",
            "docs": [
              " Reward that is received by the party whose touch has led",
              " to removal of a contract."
            ]
          },
          {
            "name": "TransferFee",
            "type": "BalanceOf",
            "constants_value": "0x40420f00000000000000000000000000",
            "docs": [
              " The fee required to make a transfer."
            ]
          },
          {
            "name": "CreationFee",
            "type": "BalanceOf",
            "constants_value": "0x40420f00000000000000000000000000",
            "docs": [
              " The fee required to create an account."
            ]
          },
          {
            "name": "TransactionBaseFee",
            "type": "BalanceOf",
            "constants_value": "0x40420f00000000000000000000000000",
            "docs": [
              " The fee to be paid for making a transaction; the base."
            ]
          },
          {
            "name": "TransactionByteFee",
            "type": "BalanceOf",
            "constants_value": "0x0a000000000000000000000000000000",
            "docs": [
              " The fee to be paid for making a transaction; the per-byte portion."
            ]
          },
          {
            "name": "ContractFee",
            "type": "BalanceOf",
            "constants_value": "0x40420f00000000000000000000000000",
            "docs": [
              " The fee required to create a contract instance. A reasonable default value",
              " is 21."
            ]
          },
          {
            "name": "CallBaseFee",
            "type": "Gas",
            "constants_value": "0xe803000000000000",
            "docs": [
              " The base fee charged for calling into a contract. A reasonable default",
              " value is 135."
            ]
          },
          {
            "name": "CreateBaseFee",
            "type": "Gas",
            "constants_value": "0xe803000000000000",
            "docs": [
              " The base fee charged for creating a contract. A reasonable default value",
              " is 175."
            ]
          },
          {
            "name": "MaxDepth",
            "type": "u32",
            "constants_value": "0x00040000",
            "docs": [
              " The maximum nesting level of a call/create stack. A reasonable default",
              " value is 100."
            ]
          },
          {
            "name": "BlockGasLimit",
            "type": "Gas",
            "constants_value": "0x8096980000000000",
            "docs": [
              " The maximum amount of gas that could be expended per block. A reasonable",
              " default value is 10_000_000."
            ]
          }
        ]
      },
      {
        "name": "finality_tracker",
        "prefix": "",
        "storage": null,
        "calls": [
          {
            "lookup": "0800",
            "name": "final_hint",
            "docs": [
              " Hint that the author of this block thinks the best finalized",
              " block is the given number."
            ],
            "args": [
              {
                "name": "hint",
                "type": "Compact\u003cBlockNumber\u003e"
              }
            ]
          }
        ],
        "events": null,
        "constants": [
          {
            "name": "WindowSize",
            "type": "BlockNumber",
            "constants_value": "0x6500000000000000",
            "docs": [
              " The number of recent samples to keep from this chain. Default is 101."
            ]
          },
          {
            "name": "ReportLatency",
            "type": "BlockNumber",
            "constants_value": "0xe803000000000000",
            "docs": [
              " The delay after which point things become suspicious. Default is 1000."
            ]
          }
        ]
      },
      {
        "name": "grandpa",
        "prefix": "GrandpaFinality",
        "storage": [
          {
            "name": "Authorities",
            "modifier": "Default",
            "type": {
              "PlainType": "Vec\u003c(AuthorityId, AuthorityWeight)\u003e"
            },
            "fallback": "0x00",
            "docs": [
              " The current authority set."
            ]
          },
          {
            "name": "PendingChange",
            "modifier": "Optional",
            "type": {
              "PlainType": "StoredPendingChange\u003cBlockNumber\u003e"
            },
            "fallback": "0x00",
            "docs": [
              " Pending change: (signaled at, scheduled change)."
            ]
          },
          {
            "name": "NextForced",
            "modifier": "Optional",
            "type": {
              "PlainType": "BlockNumber"
            },
            "fallback": "0x00",
            "docs": [
              " next block number where we can force a change."
            ]
          },
          {
            "name": "Stalled",
            "modifier": "Optional",
            "type": {
              "PlainType": "(BlockNumber, BlockNumber)"
            },
            "fallback": "0x00",
            "docs": [
              " `true` if we are currently stalled."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0900",
            "name": "report_misbehavior",
            "docs": [
              " Report some misbehavior."
            ],
            "args": [
              {
                "name": "_report",
                "type": "Bytes"
              }
            ]
          }
        ],
        "events": [
          {
            "lookup": "0700",
            "name": "NewAuthorities",
            "docs": [
              " New authority set has been applied."
            ],
            "args": [
              "Vec\u003c(AuthorityId, u64)\u003e"
            ]
          }
        ]
      },
      {
        "name": "sudo",
        "prefix": "Sudo",
        "storage": [
          {
            "name": "Key",
            "modifier": "Default",
            "type": {
              "PlainType": "AccountId"
            },
            "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " The `AccountId` of the sudo key."
            ]
          }
        ],
        "calls": [
          {
            "lookup": "0a00",
            "name": "sudo",
            "docs": [
              " Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "",
              " The dispatch origin for this call must be _Signed_.",
              "",
              " # \u003cweight\u003e",
              " - O(1).",
              " - Limited storage reads.",
              " - No DB writes.",
              " # \u003c/weight\u003e"
            ],
            "args": [
              {
                "name": "proposal",
                "type": "Box\u003cProposal\u003e"
              }
            ]
          },
          {
            "lookup": "0a01",
            "name": "set_key",
            "docs": [
              " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
              "",
              " The dispatch origin for this call must be _Signed_.",
              "",
              " # \u003cweight\u003e",
              " - O(1).",
              " - Limited storage reads.",
              " - One DB change.",
              " # \u003c/weight\u003e"
            ],
            "args": [
              {
                "name": "new",
                "type": "Address"
              }
            ]
          }
        ],
        "events": [
          {
            "lookup": "0800",
            "name": "Sudid",
            "docs": [
              " A sudo just took place."
            ],
            "args": [
              "bool"
            ]
          },
          {
            "lookup": "0801",
            "name": "KeyChanged",
            "docs": [
              " The sudoer just switched identity; the old key is supplied."
            ],
            "args": [
              "AccountId"
            ]
          }
        ]
      }
    ]
  }
}
